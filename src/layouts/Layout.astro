---
import ThemeProvider from '../components/ThemeProvider.astro';
import { ViewTransitions } from 'astro:transitions';

interface Props {
	title: string;
	description?: string;
}

const { title, description = "Abingdon Antiques - Your Premier Source for Fine Antiques" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<link rel="icon" type="image/svg+xml" href="https://xfcpn2nyfb.ufs.sh/f/LKapUqCN3UFssgg9HORiwGqRQXjaOTYzH816lIkchyoC9txN" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
		<ViewTransitions />
		<script>
			// Initialize theme before view transition
			const initializeTheme = () => {
				const savedTheme = localStorage.getItem('theme');
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				const theme = savedTheme || (prefersDark ? 'dark' : 'light');
				
				document.documentElement.classList.toggle('dark', theme === 'dark');
				if (!savedTheme) {
					localStorage.setItem('theme', theme);
				}
			};

			// Run immediately
			initializeTheme();

			// Also run on page load to ensure it's set
			document.addEventListener('DOMContentLoaded', initializeTheme);
		</script>
	</head>
	<body class="min-h-screen bg-white dark:bg-gray-900 transition-colors duration-200">
		<ThemeProvider>
			<slot />
		</ThemeProvider>
		<script>
			// Handle theme toggle
			document.addEventListener('DOMContentLoaded', () => {
				const themeToggle = document.getElementById('theme-toggle');
				if (themeToggle) {
					themeToggle.addEventListener('click', () => {
						const element = document.documentElement;
						element.classList.toggle('dark');
						const isDark = element.classList.contains('dark');
						localStorage.setItem('theme', isDark ? 'dark' : 'light');
						// Dispatch theme change event
						window.dispatchEvent(new CustomEvent('themeChange', { 
							detail: { theme: isDark ? 'dark' : 'light' } 
						}));
					});
				}
			});

			// Re-initialize theme after view transition
			document.addEventListener('astro:page-load', () => {
				const savedTheme = localStorage.getItem('theme');
				if (savedTheme) {
					document.documentElement.classList.toggle('dark', savedTheme === 'dark');
					// Dispatch theme change event to update UI
					window.dispatchEvent(new CustomEvent('themeChange', { 
						detail: { theme: savedTheme } 
					}));
				}
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: 'Montserrat', system-ui, sans-serif;
		background: #f6f6f6;
	}
	html.dark {
		background: #111827;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	/* View Transitions */
	::view-transition-old(root),
	::view-transition-new(root) {
		animation: none;
		mix-blend-mode: normal;
	}

	::view-transition-old(root) {
		z-index: 1;
		animation: fade-out 0.3s ease-out;
	}

	::view-transition-new(root) {
		z-index: 2;
		animation: fade-in 0.3s ease-out;
	}

	@keyframes fade-in {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	@keyframes fade-out {
		from {
			opacity: 1;
		}
		to {
			opacity: 0;
		}
	}

	.dark::view-transition-old(root) {
		z-index: 1;
	}
	.dark::view-transition-new(root) {
		z-index: 2;
	}
</style>
