<script>
  // Declare toggleTheme on Window interface
  declare global {
    interface Window {
      toggleTheme: () => void;
      getTheme: () => string;
    }
  }

  // Get the current theme
  const getTheme = () => {
    if (typeof localStorage !== 'undefined') {
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        return savedTheme;
      }
    }
    return 'dark'; // Default to dark theme
  };

  // Initialize theme
  const initializeTheme = () => {
    const theme = getTheme();
    document.documentElement.classList.toggle('dark', theme === 'dark');
    return theme;
  };

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      document.documentElement.classList.toggle('dark', e.matches);
      window.dispatchEvent(new CustomEvent('themeChange', { 
        detail: { theme: e.matches ? 'dark' : 'light' } 
      }));
    }
  });

  // Theme toggle function
  window.toggleTheme = () => {
    const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', newTheme);
    
    // Dispatch event for other components
    window.dispatchEvent(new CustomEvent('themeChange', { 
      detail: { theme: newTheme } 
    }));
  };

  // Expose getTheme function
  window.getTheme = getTheme;

  // Initialize theme immediately
  initializeTheme();

  // Also initialize on DOMContentLoaded as a fallback
  document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();
  });

  // Initialize after view transitions
  document.addEventListener('astro:page-load', () => {
    initializeTheme();
  });

  // Initialize theme before view transition
  document.addEventListener('astro:before-preparation', () => {
    initializeTheme();
  });

  // Ensure theme persists during view transition
  document.addEventListener('astro:after-swap', () => {
    const theme = getTheme();
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  });
</script>

<slot /> 